"use client"

import { useEffect, useState } from "react"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { NewReportDialog } from "./NewReportDialog"
import { FileIcon, DownloadIcon } from "lucide-react"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

interface Report {
  id: number
  name: string
  createdAt: string
  template: {
    name: string
    type: string
  }
  user: {
    name: string | null
    email: string
  }
}

interface ReportsProps {
  caseId: number
}

export function Reports({ caseId }: ReportsProps) {
  const [reports, setReports] = useState<Report[]>([])
  const [loading, setLoading] = useState(true)
  const [dialogOpen, setDialogOpen] = useState(false)
  const { toast } = useToast()

  const fetchReports = async () => {
    try {
      const response = await fetch(`/api/cases/${caseId}/reports`)
      if (!response.ok) throw new Error("Failed to fetch reports")
      const data = await response.json()
      setReports(data)
    } catch (error) {
      console.error("Error fetching reports:", error)
      toast({
        title: "Error",
        description: "Failed to load reports",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchReports()
  }, [caseId])

  const handleDownload = async (reportId: number) => {
    try {
      window.open(`/api/reports/${reportId}/download`, '_blank')
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to download report",
        variant: "destructive",
      })
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Reports</h2>
          <p className="text-muted-foreground">
            Generate and manage case reports
          </p>
        </div>
        <Button onClick={() => setDialogOpen(true)}>
          Generate New Report
        </Button>
      </div>

      {reports.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-8 text-center">
            <FileIcon className="h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-lg font-medium">No reports yet</p>
            <p className="text-sm text-muted-foreground">
              Generate your first report by clicking the button above
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {reports.map((report) => (
            <Card key={report.id}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>{report.name}</CardTitle>
                    <CardDescription>
                      {report.template ? (
                        `Generated from ${report.template.name} template`
                      ) : (
                        'Generated from default template'
                      )}
                    </CardDescription>
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => handleDownload(report.id)}
                  >
                    <DownloadIcon className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-muted-foreground">
                  <p>Generated by {report.user.name || report.user.email}</p>
                  <p>
                    Created on{" "}
                    {new Date(report.createdAt).toLocaleDateString(undefined, {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      <NewReportDialog
        open={dialogOpen}
        onOpenChange={setDialogOpen}
        caseId={caseId}
        onSuccess={() => {
          fetchReports()
          toast({
            title: "Success",
            description: "Report generated successfully",
          })
        }}
      />
    </div>
  )
}
